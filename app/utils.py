import json
import logging
import os
from typing import List, Optional

from agents import (
   
    OpenAIChatCompletionsModel
)
from openai import Client
from pydantic import BaseModel, Field
from starlette.websockets import WebSocket

logger = logging.getLogger(__name__)

class SwizzyOutput(BaseModel):
    reasoning: str = Field(description="Brief reasoning for the chosen action (tool use or handoff).")
    action_taken: str = Field(description="Description of the action performed (e.g., 'Used read_file_content', 'Handed off to spreadsheet_agent', 'Executed analysis script').")
    outcome: str = Field(description="Summary of the outcome (e.g., 'Success', 'Completed analysis', 'Error occurred', 'Handoff initiated').")
    response_to_user: str = Field(description="The final message to convey to the user.")
    generated_handles: Optional[List[str]] = Field(default=None, description="List of new file handles generated by a specialist agent, if any.")
    error_details: Optional[str] = Field(default=None, description="Details of any error encountered during tool use or handoff, if applicable.")

client = Client(
    api_key=os.environ.get("GOOGLE_API_KEY"),
    base_url=os.environ.get("OPENAI_BASE_URL")
)

gemini_model = OpenAIChatCompletionsModel(
    model=os.environ.get("GEMINI_MODEL_NAME", "gemini-1.5-flash"),
    openai_client=client
)

from __future__ import annotations

import json
import os
import logging
from typing import List, Optional
from pydantic import BaseModel, Field
from openai import AsyncOpenAI
# Import TaskContext and context tools from server
from server import TaskContext, get_task_id, log_action
from agents import Agent
from agents import WebSearchTool, function_tool, OpenAIChatCompletionsModel, handoff, GuardrailFunctionOutput, RunContextWrapper, output_guardrail
from dotenv import load_dotenv

# Import existing tools
from app.swizzy_tools import (
    create_document,
    extract_text_from_image,
    ponder_document_request,
    read_file_content,
)
from app.tools import (
    analyze_spreadsheet,
    create_spreadsheet,
    modify_spreadsheet,
    ponder_spreadsheet_request,
)
from app.tools.content_tools import (
    convert_pdf_to_markdown,
    convert_to_markdown,
    read_markdown,
    edit_markdown_section,
    analyze_content_structure,
    convert_file_format,
    create_markdown
)
from app.tools.web_tools import (
    read_url,
    extract_url_to_markdown,
    search_web,
    search_with_budget,
    reset_search_budget,
    get_search_cost_summary
)
from app.tools.research_tools import (
    plan_research,
    execute_research_plan,
    research_topic
)
from app.tools.data_extraction_tools import (
    extract_structured_data,
    convert_json_to_excel,
    extract_invoice_to_excel,
    extract_table_from_document
)
from app.tools.memory_tools import (
    store_memory,
    retrieve_memory,
    update_memory,
    delete_memory,
    search_memories,
    store_link,
    get_links_by_tag
)
from app.tools.core_tools import ponder_task
from app.config import STYLE_INSTRUCTIONS

logger = logging.getLogger(__name__)

# Load environment variables if not already loaded
load_dotenv()

# Verify environment variables and setup OpenAI client for Gemini
api_key = os.getenv("GOOGLE_API_KEY") # Assuming Gemini uses GOOGLE_API_KEY based on prior context
base_url = os.getenv("OPENAI_BASE_URL") # Assuming a proxy/custom base URL

if not api_key or not base_url:
    raise ValueError("Missing required environment variables: GOOGLE_API_KEY and OPENAI_BASE_URL must be set")

# Create custom OpenAI client
client = AsyncOpenAI(
    api_key=api_key,
    base_url=base_url
)

# Create the model configuration for Gemini
gemini_model = OpenAIChatCompletionsModel(
    model="gemini-1.5-flash", # Updated to 1.5-flash as per previous context, adjust if needed
    openai_client=client,
)

# --- Define Output Model ---
class SwizzyOutput(BaseModel):
    reasoning: str = Field(description="Brief reasoning for the chosen action (tool use or handoff).")
    action_taken: str = Field(description="Description of the action performed (e.g., 'Used read_file_content', 'Handed off to spreadsheet_agent', 'Executed analysis script').")
    outcome: str = Field(description="Summary of the outcome (e.g., 'Success', 'Completed analysis', 'Error occurred', 'Handoff initiated').")
    response_to_user: str = Field(description="The final message to convey to the user.")
    generated_handles: Optional[List[str]] = Field(default=None, description="List of new file handles generated by a specialist agent, if any.")
    error_details: Optional[str] = Field(default=None, description="Details of any error encountered during tool use or handoff, if applicable.")
    task_context_id: Optional[str] = Field(default=None, description="Unique ID for the current task context, if available.")

# Planner Agent Configuration - Updated with TaskContext and tools
planner_agent = Agent[TaskContext]( # <--- Added TaskContext type hint
    name="Strategic Planner Agent",
    model=gemini_model,
    instructions="".join([
        "You are the Strategic Planner Agent, specialized in creating comprehensive, structured plans for tasks and projects. ",
        "Your goal is to analyze requests, break them down into actionable steps, and create well-structured plans in Markdown ",
        "with clear success criteria. You also consider budget, task complexity, and success criteria size when formulating plans. ",
        "You can also re-strategize if the initial plan is not feasible. ",
        "You MUST use the `get_task_id` tool to get the current task ID and prepend it to the plan filename (e.g., `[task_id]_plan.md`). ",
        "You MUST log significant actions using the `log_action` tool, especially after creating the plan. ",
        # ...(rest of instructions remain the same)...
        "**WORKFLOW**: ",
        "1. When given a task, first analyze it to understand the requirements (log action).",
        "2. Break the task down into logical steps with dependencies.",
        "3. Estimate time and resources needed for each step.",
        "4. Identify potential risks and mitigation strategies.",
        "5. Define clear success criteria.",
        "6. Use get_task_id to get the task ID.",
        "7. Create the plan using create_markdown with filename `[task_id]_plan.md`.",
        "8. Log the plan creation using log_action.",
        "9. Store the plan details using store_memory with tag `generated_plan`.",
        # ...(rest of instructions remain the same)...
        "**CRITICAL RULES**",
        "- **FILENAME**: You MUST use `get_task_id` and the `create_markdown` tool with a `filename` equal to `[task_id]_plan.md`",
        "- **LOGGING**: You MUST use `log_action` after creating the plan.",
        "- Never claim to have generated a plan without actually using the `create_markdown` tool.",
         # ...(rest of instructions remain the same)...
        "**IMPORTANT: LOGGING ACTIONS AND DECISIONS**",
        "- ALWAYS log your significant planning decisions using the log_action tool",
        "- Use store_memory for detailed reasoning or complex state preservation.",
        "- Include links to relevant resources using the store_link tools"
    ]),
    tools=[
         # Context Tools FIRST
        get_task_id,
        log_action,
        # Core/Pondering Tools
        ponder_task,
        # Memory tools
        store_memory,
        retrieve_memory,
        update_memory,
        delete_memory,
        search_memories,
        store_link,
        get_links_by_tag,
        # Content tools
        read_markdown,
        create_markdown, # Primary tool for creating the plan file
        # File tools
        read_file_content
    ],
)
